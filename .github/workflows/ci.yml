name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist

    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 1
        done
        echo "PostgreSQL is up!"

        echo "Waiting for Neo4j..."
        for i in {1..30}; do
          if curl -s http://localhost:7474 > /dev/null; then
            echo "Neo4j is up!"
            break
          fi
          echo "Neo4j is unavailable - sleeping"
          sleep 2
        done

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: test_password
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v --cov=agent --cov=ingestion --cov-report=xml --cov-report=term-missing -n auto

    - name: Combine coverage data
      run: |
        # Combine coverage data from parallel test runs
        coverage combine || echo "No coverage data to combine"
        # Generate reports
        coverage xml
        coverage report
        # List coverage files for debugging
        ls -la .coverage* || echo "No .coverage files found"

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
        retention-days: 7

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black

    - name: Run ruff
      run: ruff check agent ingestion --output-format=github

    - name: Check formatting with black
      run: black --check agent ingestion

  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-3.11

    - name: Debug coverage files
      run: |
        echo "Files in current directory:"
        ls -la
        echo "Coverage files:"
        ls -la .coverage* || echo "No .coverage files"
        echo "XML coverage:"
        ls -la coverage.xml || echo "No coverage.xml"

    - name: Check coverage threshold
      run: |
        pip install coverage
        # Check if .coverage file exists and has data
        if [ -f ".coverage" ]; then
          echo "Found .coverage file, checking threshold..."
          coverage report --fail-under=20
        elif [ -f "coverage.xml" ]; then
          echo "Only coverage.xml found, parsing XML..."
          python -c "
import xml.etree.ElementTree as ET
tree = ET.parse('coverage.xml')
root = tree.getroot()
line_rate = float(root.attrib['line-rate'])
coverage_pct = line_rate * 100
print(f'Coverage: {coverage_pct:.2f}%')
if coverage_pct < 20:
    print(f'ERROR: Coverage {coverage_pct:.2f}% is below threshold of 20%')
    exit(1)
else:
    print(f'âœ… Coverage {coverage_pct:.2f}% meets threshold of 20%')
"
        else
          echo "ERROR: No coverage data found"
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
