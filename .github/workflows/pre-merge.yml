name: Pre-Merge Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov ruff black

    - name: Run all tests with strict coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: test_password
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v --cov=agent --cov=ingestion --cov-report=term-missing --cov-fail-under=80

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: test_password
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v -m integration --maxfail=1

    - name: Lint check (must pass)
      run: |
        ruff check agent ingestion

    - name: Format check (must pass)
      run: |
        black --check agent ingestion

    - name: Check for print statements
      run: |
        ! grep -r "print(" agent/ ingestion/ || (echo "Found print() statements. Use logging instead." && exit 1)

    - name: Check for TODO comments
      run: |
        todos=$(grep -r "TODO\|FIXME" agent/ ingestion/ tests/ || true)
        if [ ! -z "$todos" ]; then
          echo "⚠️  Warning: Found TODO/FIXME comments:"
          echo "$todos"
          echo "Consider creating GitHub issues for these."
        fi

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;

          console.log(`PR has ${additions} additions and ${deletions} deletions (${changes} total changes)`);

          if (changes > 1000) {
            core.setFailed(`⚠️  PR is too large (${changes} changes). Consider splitting into smaller PRs for easier review.`);
          } else if (changes > 500) {
            core.warning(`PR is quite large (${changes} changes). Consider splitting if possible.`);
          } else {
            console.log(`✅ PR size is reasonable (${changes} changes)`);
          }

  test-compatibility:
    name: Test Multiple Python Versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v -m "not slow" --maxfail=5

  merge-readiness:
    name: Merge Readiness
    runs-on: ubuntu-latest
    needs: [quality-gates, test-compatibility]

    steps:
    - name: All checks passed
      run: |
        echo "✅ All quality gates passed! PR is ready for review."
        echo "📊 Coverage: ≥80%"
        echo "🧪 Tests: All passed"
        echo "🎨 Linting: Clean"
        echo "✨ Format: Correct"
