name: Nightly Tests

on:
  schedule:
    # Run at 3 AM UTC every day
    - cron: '0 3 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  extended-tests:
    name: Extended Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-timeout pytest-benchmark

    - name: Run all tests including slow tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: test_password
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v --cov=agent --cov=ingestion --cov-report=xml --cov-report=html --timeout=300

    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: test_password
        LLM_API_KEY: sk-test-key
        EMBEDDING_API_KEY: sk-test-key
        APP_ENV: test
      run: |
        pytest -v -m slow --benchmark-only || true

    - name: Generate coverage report
      run: |
        coverage report --show-missing

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-coverage-report
        path: htmlcov/
        retention-days: 14

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-results
        path: .pytest_cache/
        retention-days: 7

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install pip-audit
      run: pip install pip-audit

    - name: Audit dependencies
      run: |
        pip-audit -r requirements.txt --desc || true

  docker-health-check:
    name: Docker Services Health
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/test_password
        ports:
          - 7687:7687
          - 7474:7474

    steps:
    - name: Check PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        pg_isready -h localhost -p 5432 -U test_user || exit 1
        psql -h localhost -p 5432 -U test_user -d test_db -c "SELECT version();"

    - name: Check Neo4j
      run: |
        curl -f http://localhost:7474 || exit 1
        echo "Neo4j is responsive"

  report:
    name: Generate Nightly Report
    runs-on: ubuntu-latest
    needs: [extended-tests, dependency-audit, docker-health-check]
    if: always()

    steps:
    - name: Create summary
      run: |
        echo "# Nightly Test Report" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Extended Tests: ${{ needs.extended-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Health: ${{ needs.docker-health-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.extended-tests.result }}" != "success" ] || [ "${{ needs.docker-health-check.result }}" != "success" ]; then
          echo "⚠️ **Some tests failed. Please investigate.**" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **All nightly tests passed!**" >> $GITHUB_STEP_SUMMARY
        fi
